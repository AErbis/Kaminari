diff --git a/include/kaminari/broadcaster.hpp b/include/kaminari/broadcaster.hpp
index 0cb0786..7351d0f 100644
--- a/include/kaminari/broadcaster.hpp
+++ b/include/kaminari/broadcaster.hpp
@@ -8,11 +8,15 @@ namespace kaminari
     {
     public:
         template <typename C>
-        void broadcast(C&& callback)
-        {}
+        inline void broadcast(C&& callback)
+        {
+            static_cast<Derived&>(*this).broadcast(std::move(callback));
+        }
 
         template <typename C>
-        void broadcast_single(C&& callback)
-        {}
+        inline void broadcast_single(C&& callback)
+        {
+            static_cast<Derived&>(*this).broadcast_single(std::move(callback));
+        }
     };
 }
diff --git a/include/kaminari/queues/unreliable_queue.hpp b/include/kaminari/queues/unreliable_queue.hpp
index 7cc7b6f..ae40ed7 100644
--- a/include/kaminari/queues/unreliable_queue.hpp
+++ b/include/kaminari/queues/unreliable_queue.hpp
@@ -27,7 +27,8 @@ namespace kaminari
                 // Make sure we dont have any pending packet
                 for (auto pending : Packer::_pending)
                 {
-                    Packer::_pending_pool.free(pending);
+                    std::destroy_at(pending);
+                    Packer::_allocator.deallocate(pending, 1);
                 }
 
                 Packer::_pending.clear();
@@ -41,7 +42,9 @@ namespace kaminari
                 // Free those that have reached max retries ar freed
                 for (auto it = part; it != end; ++it)
                 {
-                    Packer::_pending_pool.free(*it);
+                    auto pending = *it;
+                    std::destroy_at(pending);
+                    Packer::_allocator.deallocate(pending, 1);
                 }
 
                 Packer::_pending.resize(std::distance(Packer::_pending.begin(), part));
